#!/usr/bin/env node

// Copyright 2017 Akamai Technologies, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

"use strict";

/**
 * Command line tool to interface with the WebSite library for manipulating the CDN activities on Akamai
 *
 * @author Colin Bendell <colinb@akamai.com>
 */

var path = require('path');

let WebSite = require('../index').WebSite;

function appName() {
    return process.argv[1].replace(/.*\//, "");
}

function help() {
    let app = appName();
    console.log(`Usage: ${app} <SRC_CONFIG> [options...]
Where: 
SRC_CONFIG           is the source configuration name. Use either hostnames (eg: www.example.com) or akamai configuration
                     names (eg: example_prod_ion).
--version VERSION    the configuration VERSION of SRC_CONFIG to copy from. Use in conjunction with --to and/or --on. 
                     Values are either numbers >= 1 corresponding to versions, 0 for LATEST, -1 for current PROD version
                     or -2 for current STAGING version. Default is LATEST (0).
--dest DEST_PROP     target property for clone, create or copy
--out FILE           stores the rules to FILE
--src FILE           updates SRC_CONFIG with the rule contents from FILE. Cannot be used in conjunction with --copyto
--activate  ENV      indicates to also activate to ENV. Values include PRODUCTION, STAGING, or both.
--deactivate ENV     deactivate ENV (PRODUCTION, STAGING, or both) from the Akamai platform
--force              //TODO create new version
--addhost            //TODO
--create             create new version - requires dest
--clone              create new property by cloning existing property (use --src and --dest)
--config_file        config file for create or clone
`);
    process.exit(0);
}

function createProperty(property, config) {
    console.log("ABOUT TO CREATE PROPERTY");
    return property.createProperty(config);
    console.log("DONE CREATING PROPERTY");
}

function updateProperty(property, options) {
    if (options.srcFile)
        return property.updateFromFile(options.srcProperty, options.srcFile);
    if (options.destProperty)
        return property.copy(options.srcProperty, options.srcVersion, options.destProperty);
    return Promise.resolve();
}

function retrieveProperty(property, options) {
    if (options.destFile)
        return property.retrieveToFile(options.srcProperty, options.srcVersion, options.destFile);
    return Promise.resolve();
}

function activateProperty(property, options, data) {
    if (!options.activate)
        return Promise.resolve();

    let env = options.activateNetwork;
    return Promise.resolve()
        .then(() => {
            if (data && data.propertyVersion)
                return Promise.resolve(data);
            return property.lookupPropertyIdFromHost(options.activateProperty);
        })
        .then(data => {
            options.activateVersion = data.propertyVersion;
            if ("BOTH" === env || env.startsWith("STAG"))
                return property.activate(options.activateProperty, options.activateVersion, WebSite.AKAMAI_ENV.STAGING,
                    "Updated Automatically to staging.", options.email);
            return Promise.resolve(data);
        })
        .then(data => {
            if ("BOTH" === env || env.startsWith("PROD"))
                return property.activate(options.activateProperty, options.activateVersion, WebSite.AKAMAI_ENV.PRODUCTION,
                    "Updated Automatically to prod.", options.email);
            return Promise.resolve(data);
        });
}

function deactivateProperty(property, options, data) {
    if (!options.deactivate)
        return Promise.resolve();

    let env = options.deactivateNetwork;
    return Promise.resolve()
        // .then(() => {
        //     if (data && data.propertyVersion)
        //         return Promise.resolve(data);
        //     return property.lookupPropertyIdFromHost(options.deactivateProperty);
        // })
        .then(data => {
            if ("BOTH" === env || env.startsWith("STAG"))
                return property.deactivate(options.deactivateProperty, WebSite.AKAMAI_ENV.STAGING,
                    "Automatically deactivating on staging.", options.email);
            return Promise.resolve(data);
        })
        .then(data => {
            if ("BOTH" === env || env.startsWith("PROD"))
                return property.deactivate(options.deactivateProperty, WebSite.AKAMAI_ENV.PRODUCTION,
                    "Automatically deactivating on prod.", options.email);
            return Promise.resolve(data);
        });
}

function main()
{
    let srcProperty,
        destProperty,
        fromFile,
        toFile,
        version = 0,
        env = 'both',
        activate,
        deactivate,
        email,
        create,
        clone,
        configFile = "";

    let lastValue = null;
    for (const value of process.argv.slice(2)) {
        if ("--help" === value) {
            help();
        }
        if (!srcProperty && !lastValue && !value.startsWith('--')) {
            srcProperty = value;
        }
        else {
            switch (lastValue) {
                case "--version":
                    if (Number.isNaN(Number(value)) || value < -2)
                        help();
                    version = value;
                    break;
                case "--dest":
                    destProperty = value;
                    break;
                case "--src":
                    fromFile = value;
                    break;
                case "--out":
                    toFile = value;
                    break;
                case "--activate":
                    env = value.toUpperCase();
                    if ("BOTH" != env && !env.startsWith("STAG") && !env.startsWith("PROD"))
                        help();
                    activate = true;
                    break;
                case "--deactivate":
                    env = value.toUpperCase();
                    if ("BOTH" != env && !env.startsWith("STAG") && !env.startsWith("PROD"))
                        help();
                    deactivate = true;
                    break;
                case "--create":
                    create = true;
                    destProperty = value;
                    break;
                case "--clone":
                    clone = true;
                    break;
                case "--config_file":
                    configFile = value;
                    break;
                case "--email":
                    email = value;
            }
            lastValue = lastValue ? null : value;
        }
    }

    if (create || clone) {
        if (create && !destProperty && !configFile) help();
        if (clone && (!srcProperty||!destProperty) && !configFile) help();
        
        let property = new WebSite({path:"~/.edgerc", section: "papi"});
        let app = appName;
        console.time(app);

        console.log(configFile);

        Promise.resolve()
            .then(() => property.setConfig(configFile)
            .then((config) => {
                config.srcProperty = srcProperty;
                config.destProperty = destProperty;
                createProperty(property, config);
            })
            .then(() => {
                console.timeEnd(app);
                console.info("Created property");
            })
            .catch((error) => {
                console.timeEnd(app);
                console.error("ERROR: ", error.body || JSON.stringify(error));
                if (error.stack) console.log(error.stack);
            }))
    } else {
        if (!srcProperty) help();
        if (destProperty && fromFile) help();
        if (!destProperty && !fromFile && !env && !toFile) help();
        let options = {
            srcProperty: srcProperty,
            srcFile: fromFile,
            srcVersion: version,
            destProperty: destProperty,
            destFile: toFile,
            activate: activate,
            activateVersion: version,
            activateNetwork: env,
            activateProperty: (destProperty || srcProperty),
            deactivate: deactivate,
            deactivateNetwork: env,
            deactivateProperty: (destProperty || srcProperty),
            email: email
        };

        let property = new WebSite();
        let app = appName();
        console.time(app);

        Promise.resolve()
            .then(() => updateProperty(property, options))
            .then(data => activateProperty(property, options, data))
            .then(data => deactivateProperty(property, options, data))
            .then(data => retrieveProperty(property, options))
            .then(() => {
                console.timeEnd(app);
                console.info("Success!");
            })
            .catch((error) => {
                console.timeEnd(app);
                console.error("ERROR: ", error.body || JSON.stringify(error));
                if (error.stack) console.log(error.stack);
            });
    }
}

main();
