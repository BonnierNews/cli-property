#!/usr/bin/env node

// Copyright 2017 Akamai Technologies, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

"use strict";

/**
 * Command line tool to interface with the WebSite library for manipulating the CDN activities on Akamai
 *
 * @author Colin Bendell <colinb@akamai.com>
 */

var path = require('path');

let WebSite = require('../index').WebSite;

function appName() {
    return process.argv[1].replace(/.*\//, "");
}

function help() {
    let app = appName();
    console.log(`Usage: ${app} <TARGET_PROP> [options...]
Where: 
TARGET_PROP          is the configuration name. Use either hostnames (eg: www.example.com) or akamai configuration
                     names (eg: example_prod_ion).
--version VERSION    the configuration VERSION of TARGET_PROP to copy from. Use in conjunction with --to and/or --on. 
                     Values are either numbers >= 1 corresponding to versions, 0 for LATEST, -1 for current PROD version
                     or -2 for current STAGING version. Default is LATEST (0).
--dest DEST_PROP     target property for copy
--outfile FILE       stores the rules to FILE
--srcfile FILE       updates SRC_CONFIG with the rule contents from FILE. Cannot be used in conjunction with --copyto
--activate  ENV      indicates to also activate to ENV. Values include PRODUCTION, STAGING, or both.
--deactivate ENV     deactivate ENV (PRODUCTION, STAGING, or both) from the Akamai platform
--delete PROP        delete property from the system
--create PROP        create new property configuration
--clone PROP         clone property to a new config
--name               name for new config for clone or create
--hostnames          hostnames for new property, comma delimited
--cpcode             cpcode to use for create
--contract           contract ID for create or clone
--nocopy             don't copy the hostnames when cloning
`);
    process.exit(0);
}

function updateProperty(property, options) {
    if (options.srcFile && !options.create)
        return property.updateFromFile(options.srcProperty, options.srcFile);
    if (options.destProperty)
        return property.copy(options.srcProperty, options.srcVersion, options.destProperty);
    return Promise.resolve();
}

function createProperty(property, options) {
    if (!options.create && !options.clone) {
        return Promise.resolve();
    }
    let hostnames;
    if (options.hostnames) {
        hostnames = options.hostnames.split(',')
    }

    if (options.create && !options.clone) {
        if (options.srcFile) {
          return property.createFromFile(hostnames, 
                                        options.srcFile,
                                        options.configName,
                                        options.contractId, 
                                        options.cpcode);

        } else {
            return property.create(hostnames, 
                                        options.cpcode,
                                        options.configName,
                                        options.contractId, 
                                        null);
        }
    } else if (options.cloneProperty) {
        return property.createFromExisting(options.cloneProperty, 
                                        options.version, 
                                        options.copyHostnames,
                                        hostnames,
                                        options.configName, 
                                        options.contractId
                                        )
    }
}

function deleteProperty(property, options) {
    if (!options.deleteProperty)
        return Promise.resolve;
    return property.deleteProperty(options.deleteProperty);
}

function retrieveProperty(property, options) {
    if (options.destFile)
        return property.retrieveToFile(options.srcProperty, options.srcVersion, options.destFile);
    return Promise.resolve();
}

function activateProperty(property, options, data) {
    if (!options.activate)
        return Promise.resolve();

    let env = options.activateNetwork;
    return Promise.resolve()
        .then(() => {
            if (data && data.propertyVersion)
                return Promise.resolve(data);
            return property.lookupPropertyIdFromHost(options.activateProperty);
        })
        .then(data => {
            options.activateVersion = data.propertyVersion;
            if ("BOTH" === env || env.startsWith("STAG"))
                return property.activate(options.activateProperty, options.activateVersion, WebSite.AKAMAI_ENV.STAGING,
                    "Updated Automatically to staging.", options.email);
            return Promise.resolve(data);
        })
        .then(data => {
            if ("BOTH" === env || env.startsWith("PROD"))
                return property.activate(options.activateProperty, options.activateVersion, WebSite.AKAMAI_ENV.PRODUCTION,
                    "Updated Automatically to prod.", options.email);
            return Promise.resolve(data);
        });
}

function deactivateProperty(property, options, data) {
    if (!options.deactivate)
        return Promise.resolve();

    let env = options.deactivateNetwork;
    return Promise.resolve()
        .then(data => {
            if ("BOTH" === env || env.startsWith("STAG"))
               return property.deactivate(options.deactivateProperty, WebSite.AKAMAI_ENV.STAGING,
                    "Automatically deactivating on staging.", options.email);
            return Promise.resolve(data);
        })
        .then(data => {
            if ("BOTH" === env || env.startsWith("PROD"))
                return property.deactivate(options.deactivateProperty, WebSite.AKAMAI_ENV.PRODUCTION,
                    "Automatically deactivating on prod.", options.email);
            return Promise.resolve(data);
        });
}

function main()
{
    let srcProperty,
        destProperty,
        fromFile,
        toFile,
        version = 0,
        env = 'both',
        activate,
        deactivate,
        email,
        create,
        clone,
        deleteProp,
        propertyName,
        hostnames,
        cpcode,
        cloneProperty,
        copyHostnames=true,
        contractId,
	configName

    let lastValue = null;
    
    for (const value of process.argv.slice(2)) {
        if ("--help" === value) {
            help();
        }
        if (!srcProperty && !lastValue && !value.startsWith('--')) {
            srcProperty = value;
        }
        else {
            switch (lastValue) {
                case "--version":
                    if (Number.isNaN(Number(value)) || value < -2)
                        help();
                    version = value;
                    break;
                case "--dest":
                    destProperty = value;
                    break;
                case "--srcfile":
                    fromFile = value;
                    break;
                case "--outfile":
                    toFile = value;
                    break;
                case "--activate":
                    env = value.toUpperCase();
                    if ("BOTH" != env && !env.startsWith("STAG") && !env.startsWith("PROD"))
                        help();
                    activate = true;
                    break;
                case "--deactivate":
                    env = value.toUpperCase();
                    if ("BOTH" != env && !env.startsWith("STAG") && !env.startsWith("PROD"))
                        help();
                    deactivate = true;
                    break;
                case "--create":
                    create = true;
                    configName = value;
                    break;
                case "--clone":
                    clone = true;
                    cloneProperty = value;
                    break;
                case "--delete":
                    deleteProp = value;
                    break;
                case "--email":
                    email = value;
                    break;
                case "--hostnames":
                    hostnames = value;
                    break;
                case "--name":
                    propertyName = value;
                    break
                case "--nocopy":
                    copyHostnames = false;
                    break
                case "--contract":
                    contractId = value
                    break
                case "--cpcode":
                    cpcode = value
                    break
            }
            lastValue = lastValue ? null : value;
        }
    }
        
        let property = new WebSite({path:"~/.edgerc", section: "papi2"});

        if (create && !hostnames && !configName) help("Create requires hostnames or a configName");
        if (!srcProperty && !deleteProp && !create && !cloneProperty) help();
        if (destProperty && fromFile) help();
        if (!destProperty && !fromFile && !env && !toFile && !deleteProp && !create) help();
        let options = {
            srcProperty: srcProperty,
            srcFile: fromFile,
            srcVersion: version,
            destProperty: destProperty,
            destFile: toFile,
            activate: activate,
            activateVersion: version,
            activateNetwork: env,
            activateProperty: (destProperty || srcProperty),
            deactivate: deactivate,
            deactivateNetwork: env,
            deleteProperty: deleteProp,
            deactivateProperty: (destProperty || srcProperty),
            email: email,
            create: create,
            clone: clone,
            hostnames: hostnames,
            cpcode: cpcode,
            configName: configName,
            cloneProperty: cloneProperty,
            contractId: contractId,
            copyHostnames: copyHostnames
        };
        
        let app = appName();
        console.time(app);
        
        Promise.resolve()
            .then(() => createProperty(property, options))
            .then(() => updateProperty(property, options))
            .then(data => activateProperty(property, options, data))
            .then(data => deactivateProperty(property, options, data))
            .then(data => retrieveProperty(property, options))
            .then(data => deleteProperty(property, options))
            .then(() => {
                console.timeEnd(app);
                console.info("Success!");
            })
            .catch((error) => {
                console.timeEnd(app);
                console.error("ERROR: ", error.body || JSON.stringify(error));
                if (error.stack) console.log(error.stack);
            });
    }

main();
