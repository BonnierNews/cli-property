#!/usr/bin/env node
"use strict";

//import {WebSite, AKAMAI_ENV} from '../src/website';
let website = require('../src/website');

function appName() {
    return process.argv[1].replace(/.*\//, "");
}

function help() {
    let app = appName();
    console.log(`Usage: ${app} <SRC_CONFIG> [options...]
Where: 
SRC_CONFIG           is the source configuration name. Use either hostnames (eg: www.example.com) or akamai configuration
                     names (eg: example_prod_ion).
--version VERSION    the configuration VERSION of SRC_CONFIG to copy from. Use in conjunction with --to and/or --on. 
                     Values are either numbers >= 1 corresponding to versions, 0 for LATEST, -1 for current PROD version
                     or -2 for current STAGING version. Default is LATEST (0).
--copyto DEST_CONFIG indicates that the SRC_CONFIG is being copied to DEST_CONFIG (using VERSION)
--file FILE          updates SRC_CONFIG with the rule contents from FILE. Cannot be used in conjunction with --to
--activate  ENV      indicates to also activate to ENV. Values include PRODUCTION, STAGING, or both.
`);
    process.exit(0);
}

function main()
{
    let srcProperty,
        destProperty,
        fromFile,
        version = 0,
        env,
        email;

    let lastValue;
    for (const value of process.argv.slice(2)) {
        if ("--help" === value) {
            help();
        }
        if (!srcProperty && !lastValue && !value.startsWith('--')) {
            srcProperty = value;
        }
        else {
            switch (lastValue) {
                case "--version":
                    if (!Number.isInteger(value) || value < -2)
                        help();
                    version = value;
                    break;
                case "--copyto":
                    destProperty = value;
                    break;
                case "--file":
                    fromFile = value;
                    break;
                case "--activate":
                    if ("both" != value && "PRODUCTION" != value && "STAGING" != value)
                        help();
                    env = value;
                    break;
                case "--email":
                    email = value;
            }
            lastValue = lastValue ? null : value;
        }
    }
    if (!srcProperty) help();
    if (destProperty && fromFile) help();
    if (!destProperty && !fromFile && !env) help();

    let property = new website.WebSite();
    let newVersion = version;
    let targetProperty = srcProperty;
    let app = appName();

    console.time(app);
    new Promise(resolve => resolve())
        .then(() => {
            if (fromFile)
                return property.updateFromFile(srcProperty, fromFile);
            if (destProperty) {
                targetProperty = destProperty;
                return property.copy(srcProperty, version, destProperty);
            }
            return property.lookupPropertyIdFromHost(srcProperty);
        })
        .then(data => {
            newVersion = data.propertyVersion;
            if ("both" === env || "STAGING" === env)
                return property.activate(targetProperty, newVersion, website.AKAMAI_ENV.STAGING, "Updated Automatically to staging.", email);
            return new Promise(resolve => resolve());
        })
        .then(() => {
            if ("both" === env || "PRODUCTION" === env)
                return property.activate(targetProperty, newVersion, website.AKAMAI_ENV.PRODUCTION, "Updated Automatically to prod.", email);
            return new Promise(resolve => resolve());
        })
        .then(() => {
            console.timeEnd(app);
            console.info("Successfully Active!")
        })
        .catch((error) => {
            console.timeEnd(app);
            console.error("ERROR: ", error.body || error);
        });

    //
    // let args = process.argv.slice(2);
    // let env = args[0];
    // let property = new website.WebSite();
    //
    // let devProperty = "dev-www.akamaiedgedemo.com";
    // let qaProperty = "qa-www.akamaiedgedemo.com";
    // let prodProperty = "www.akamaiedgedemo.com";
    //
    // let targetProperty = env; //dev
    // if (env == "qa")
    //     targetProperty = qaProperty;
    // else if (env == "www")
    //     targetProperty = prodProperty;
    //
    // let newVersion;
    // if (devProperty != targetProperty) {
    //
    //     console.time('TestJob');
    //     property.copy(devProperty, website.LATEST_VERSION.LATEST, targetProperty)
    //         .then(data => {
    //             newVersion = data.propertyVersion;
    //             return property.activate(targetProperty, newVersion, website.AKAMAI_ENV.STAGING, "Updated Automatically to STAGING!", ["colinb@akamai.com"]);
    //         })
    //         .then(() => {
    //             return property.promoteStagingToProd(targetProperty, "Updated Automatically to PRODUCTION!", [email]);
    //         })
    //         .then(() => {
    //             console.timeEnd('TestJob');
    //             console.info("Successfully Active!")
    //         })
    //         .catch((error) => {
    //             console.error("ERROR: ", error.body || error);
    //         });

        // property.deactivate(devProperty, website.LATEST_VERSION.STAGING, website.AKAMAI_ENV.STAGING, "Updated Automatically to STAGING!", ["colinb@akamai.com"])
        //     .then(data => {
        //         console.timeEnd('TestJob');
        //         console.info("Successfully deactivated!");
        //         console.info(data);
        //     })
        //     .catch((error) => {
        //         console.error("ERROR: ", error.body || error);
        //     });
    // }
}

main();
