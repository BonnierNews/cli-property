#!/usr/bin/env node
"use strict";

//import {WebSite, AKAMAI_ENV} from '../src/website';
let WebSite = require('../index').WebSite;

function appName() {
    return process.argv[1].replace(/.*\//, "");
}

function help() {
    let app = appName();
    console.log(`Usage: ${app} <SRC_CONFIG> [options...]
Where: 
SRC_CONFIG           is the source configuration name. Use either hostnames (eg: www.example.com) or akamai configuration
                     names (eg: example_prod_ion).
--version VERSION    the configuration VERSION of SRC_CONFIG to copy from. Use in conjunction with --to and/or --on. 
                     Values are either numbers >= 1 corresponding to versions, 0 for LATEST, -1 for current PROD version
                     or -2 for current STAGING version. Default is LATEST (0).
--copyto DEST_CONFIG indicates that the SRC_CONFIG is being copied to DEST_CONFIG (using VERSION)
--out FILE           stores the rules to FILE
--src FILE           updates SRC_CONFIG with the rule contents from FILE. Cannot be used in conjunction with --copyto
--activate  ENV      indicates to also activate to ENV. Values include PRODUCTION, STAGING, or both.
--deactivate ENV     deactivate ENV (PRODUCTION, STAGING, or both) from the Akamai platform
--force              //TODO create new version
--addhost            //TODO
`);
    process.exit(0);
}

function main()
{
    let srcProperty,
        destProperty,
        fromFile,
        toFile,
        version = 0,
        env = 'both',
        activate,
        deactivate,
        email;

    let lastValue;
    for (const value of process.argv.slice(2)) {
        if ("--help" === value) {
            help();
        }
        if (!srcProperty && !lastValue && !value.startsWith('--')) {
            srcProperty = value;
        }
        else {
            switch (lastValue) {
                case "--version":
                    if (Number.isNaN(Number(value)) || value < -2)
                        help();
                    version = value;
                    break;
                case "--copyto":
                    destProperty = value;
                    break;
                case "--src":
                    fromFile = value;
                    break;
                case "--out":
                    toFile = value;
                    break;
                case "--activate":
                    if ("both" != value && "PRODUCTION" != value && "STAGING" != value)
                        help();
                    env = value;
                    activate = true;
                    break;
                case "--deactivate":
                    if ("both" != value && "PRODUCTION" != value && "STAGING" != value)
                        help();
                    env = value;
                    deactivate = true;
                    break;
                case "--email":
                    email = value;
            }
            lastValue = lastValue ? null : value;
        }
    }
    if (!srcProperty) help();
    if (destProperty && fromFile) help();
    if (!destProperty && !fromFile && !env && !toFile) help();

    let property = new WebSite();
    let newVersion = version;
    let targetProperty = srcProperty;
    let app = appName();

    console.time(app);
    env = env.toUpperCase();

    Promise.resolve()
        .then(() => {
            if (fromFile)
                return property.updateFromFile(srcProperty, fromFile);
            if (destProperty) {
                targetProperty = destProperty;
                return property.copy(srcProperty, version, destProperty);
            }
            return property.lookupPropertyIdFromHost(srcProperty);
        })
        .then(data => {
            newVersion = data.propertyVersion;
            if ("BOTH" === env || env.startsWith("STAG")) {
                if (activate)
                    return property.activate(targetProperty, newVersion, WebSite.AKAMAI_ENV.STAGING, "Updated Automatically to staging.", email);
                else if (deactivate)
                    return property.deactivate(targetProperty, newVersion, WebSite.AKAMAI_ENV.STAGING, "Automatically deactivating on staging.", email);
            }
            return Promise.resolve();
        })
        .then(() => {
            if ("BOTH" === env || env.startsWith("PROD")) {
                if (activate)
                    return property.activate(targetProperty, newVersion, WebSite.AKAMAI_ENV.PRODUCTION, "Updated Automatically to prod.", email);
                else if (deactivate)
                    return property.deactivate(targetProperty, newVersion, WebSite.AKAMAI_ENV.PRODUCTION, "Automatically deactivating on prod.", email);
            }
            return Promise.resolve();
        })
        .then(() => {
            if (toFile) {
                return property.retrieveToFile(srcProperty, version, toFile);
            }
            return Promise.resolve();
        })
        .then(() => {
            console.timeEnd(app);
            console.info("Success!");
        })
        .catch((error) => {
            console.timeEnd(app);
            console.error("ERROR: ", error.body || JSON.stringify(error));
            if (error.stack) console.log(error.stack);
        });
}

main();
