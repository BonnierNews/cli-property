#!/usr/bin/env node

// Copyright 2017 Akamai Technologies, Inc. All Rights Reserved
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

"use strict";

/**
 * Command line tool to interface with the WebSite library for manipulating the CDN activities on Akamai
 *
 * @author Colin Bendell <colinb@akamai.com>
 */

var path = require('path');
let untildify = require('untildify');
let WebSite = require('../index').WebSite;

let program = require('commander');

if ((process.versions["node"]).split('.')[0] < 7) {
    console.log("The Akamai CLI for Property Manager requires Node 7 or later.")
    process.exit()
}

function appName() {
    return process.argv[1].replace(/.*\//, "");
}
let app = "akamai property";

let section = "papi";
let config = untildify("~/.edgerc");
let debug = false;
let targetProperty;
let searchString;

process.env.NODE_TLS_REJECT_UNAUTHORIZED = "0";

function activateProperty(app, targetProperty, options) {
    
    let env = options.network.toUpperCase();
    return Promise.resolve()
        .then(() => {
            return app.lookupPropertyIdFromHost(targetProperty);
        })
        .then(data => {
            if (!numberVersion(options.propver)) {
                options.propver = data.propertyVersion;
            }
            if ("BOTH" === env || env.startsWith("STAG"))
                return app.activate(   targetProperty, 
                                            numberVersion(options.propver), 
                                            WebSite.AKAMAI_ENV.STAGING,
                                            "Updated Automatically to staging.", 
                                            options.email);
            return Promise.resolve(data);
        })
        .then(data => {
            if ("BOTH" === env || env.startsWith("PROD"))
                return app.activate(   targetProperty, 
                                            numberVersion(options.propver), 
                                            WebSite.AKAMAI_ENV.PRODUCTION,
                                            "Updated Automatically to prod.", 
                                            options.email);
            return Promise.resolve(data);
        });
}

function deactivateProperty(app, targetProperty, options) {
    section = options.section || section;
    
    let env = options.network.toUpperCase();
    return Promise.resolve()
        .then(() => {
            if ("BOTH" === env || env.startsWith("STAG"))
               return app.deactivate(  targetProperty, 
                                            WebSite.AKAMAI_ENV.STAGING,
                                            "Automatically deactivating on staging.", 
                                            options.email);
            return Promise.resolve();
        })
        .then(() => {
            if ("BOTH" === env || env.startsWith("PROD"))
                return app.deactivate( targetProperty, 
                                            WebSite.AKAMAI_ENV.PRODUCTION,
                                            "Automatically deactivating on prod.", 
                                            options.email);
            return Promise.resolve();
        });
}


function updateProperty(app, targetProperty, options) {
    section = options.section || section;
 
    if (options.file)
        return app.updateFromFile( targetProperty, 
                                        options.file, 
                                        options.origin);
    
    if (options.srcprop)
        return app.copy(   options.srcprop, 
                                numberVersion(options.srcver), 
                                targetProperty);
    return Promise.resolve();
}

function deleteProperty(app, targetProperty, options) {
    return app.deleteProperty(targetProperty);
}

function createProperty(app, targetProperty, options) {
    let hostnames = options.hostnames
    if (options.edgehostname) {
        process.env.USE_PROVIDED_HOSTNAME = 1;
    }
    if (!options.clone) {
        if (options.file) {
          return app.createFromFile(hostnames, 
                                        options.file,
                                        targetProperty,
                                        options.contract, 
                                        options.group,
                                        options.cpcode,
                                        options.origin,
                                        options.edgehostname,
                                        options.ruleformat);

        } else {
            return app.create(hostnames, 
                                        options.cpcode,
                                        targetProperty,
                                        options.contract, 
                                        options.group,
                                        null,
                                        options.origin,
                                        options.edgehostname,
                                        options.ruleformat)
        }
    } else {
        return app.createFromExisting(options.clone, 
                                        numberVersion(options.srcver), 
                                        options.nocopy,
                                        hostnames,
                                        targetProperty, 
                                        options.contract, 
                                        options.group,
                                        options.origin,
                                        options.edgehostname,
                                        options.cpcode,
                                        options.ruleformat
                                        )
    }
}

function retrieveProperty(app, targetProperty, options) {
    if (options.file) {
        return app.retrieveToFile( targetProperty, 
                                        options.file, 
                                        numberVersion(options.propver));
    } else if (options.format) {
        return app.retrievePropertyRuleFormat(targetProperty, numberVersion(options.propver))
    } else if (options.variables) {
        return app.getVariables(targetProperty, numberVersion(options.propver), options.file)
    } else {
        return app.retrieve(targetProperty, 
                                numberVersion(options.propver),
                                false)
        .then(data => {
            console.log(JSON.stringify(data,'',2));
            return Promise.resolve();
        })
    }
}

function retrieveNewestFormat(app) {
    return app.retrieveFormats(true)
    .then(data => {
        console.log(data);
    })
}

function retrieveGroups(app) {
    return app.retrieveGroups()
    .then(data => {
        console.log(data);
    })
}

function searchProperties(app, searchString, options) {
    return app.searchProperties(searchString)
    .then(data => {
        console.log(JSON.stringify(data,'',2))
    })
}

function retrieveFormats(app, options) {
    return app.retrieveFormats()
    .then(data => {
        console.log(JSON.stringify(data,'',2))
    })
}

function retrieveHostnames(app, targetProperty) {
    return app.retrieve(targetProperty, 0, true)
    .then(data => {
        console.log(JSON.stringify(data.hostnames.items, '', 2));
    })
}

function modifyProperty(app, targetProperty, options, command) {
    let version = numberVersion(options.propver) ? numberVersion(options.propver) : 0;
        if (options.addhosts.length > 0) {
            return app.addHostnames(targetProperty, version, options.addhosts, options.edgehostname);
        } 
        if (options.delhosts.length > 0) {
            return app.delHostnames(targetProperty, version, options.delhosts, options.edgehostname)
        }
        if (options.origin || options.forward) {
            return app.setOrigin(targetProperty, version, options.origin, options.forward);
        }
        if (options.edgehostname && command != "create") {
            return app.assignEdgeHostname(targetProperty, version, options.edgehostname, options.new);
        } 
        if (options.notes) {
            return app.setComments(targetProperty, version, options.notes);
        } 
        if (options.variables) {
                return app.setVariables(targetProperty, version, options.variables);
        }
        if (options.cpcode) {
            return app.setCpcode(targetProperty, version, options.cpcode)
        }
        if (options.move) {
            return app.moveProperty(targetProperty, options.move)
        }
        if (options.ruleformat) {
            return app.setRuleFormat(targetProperty, version, options.ruleformat)
        } 
        if (options.sureroutemap || options.surerouteto || options.sureroutetohost) {
            return app.setSureRoute(targetProperty,
                                            version, 
                                            options.sureroutemap, 
                                            options.surerouteto,
                                            options.sureroutetohost);
        }
    }

function numberVersion(version) {
    if (version == null) {
        return 0;
    }
    
    let versionstring = version.toString();
    let returnstring;

    if (versionstring.match(/^stag/i)) {
            returnstring = -2;
    } else if (versionstring.match(/^prod/i)) {
            returnstring = -1;
    } else if (versionstring.match(/^late/i)) {
            returnstring = 0;
    } else if (!versionstring.match(/^\d*$/)){
            console.log("Unable to parse version string, using latest")
            return 0;
    } else {
        returnstring = version;
    }
    return returnstring;
}

const variableFileExample = [{
    name: 'PMUSER_TEST',
    value: 'Foobar',
    description: 'This is my test variable',
    hidden: false,
    sensitive: false,
    action: ['delete', 'update', 'create']
  }]

function main () {
    process.argv[1] = 'akamai property'
    const NETWORK_CHOICES = ['PROD', 'STAGING', 'BOTH']
    const chalk = require('chalk')
    return require('sywac')
      .file('--config <config>', { 
          desc: 'Config file for credentials (default ~/.edgerc)',
          defaultValue: config,
          group: "Credentials"
      })
      .string('--section <section>', { 
          desc: 'Config section for credentials (default "papi")',
          defaultValue: section,
          group: "Credentials"
        })
       .boolean('--debug <debug>', { 
            desc: 'Turn on debugging.',
            defaultValue: false,
            group: "Command"
       })
  
      .command('groups', {
        desc: 'retrieve account groups',
        run: options => {
            let app = new WebSite({path:options.config, section: options.section, debug: debug});
            return retrieveGroups(app)
        }
      })
      .command('formats', {
        desc: 'get rules formats',
        run: options => {
            let app = new WebSite({path:options.config, section: options.section, debug: debug});
            if (options.newest) {
                return retrieveNewestFormat(app)
            } else {
                return retrieveFormats(app)
            }
          }

      })
      .command('search <property>', { 
        desc: 'search for a property name',
        paramsDesc: 'Enter a string to search for.',
        run: options => {
            let app = new WebSite({path:options.config, section: options.section, debug: debug});
            return searchProperties(app, options.property)
        }
      })
      .command('create <property>', {
        desc: 'create a new property',
        setup: sywac => {
          sywac
            .string('--clone <from>', {
              desc: 'Source property to clone from',
              group: 'Source'
            })
            .string('--srcver <version>', {
              desc: 'Version for source property',
              group: 'Source'
            })
            .file('--file <path>', {
              desc: 'Source file for new property rules',
              mustExist: true, // make sure file exists on local file system
              group: 'Source'
            })
            .stringArray('--hostnames <list>', {
              desc: 'Comma delimited list of hostnames for property',
              group: "Hostnames"
            })
            .string('--origin <origin>', {
              desc: 'Origin to set for property',
              group: "Hostnames"
            })
            .string('--edgehostname <edgehostname>', {
              desc: 'Edge hostname to use',
              group: "Hostnames"
            })
            .number('--cpcode <cpcode>', {
              desc: 'Use specified cpcode for new property',
              group: 'Location'
            })
            .string('--contract <contract>', {
              desc: 'Contract for new property',
              group: 'Location'
            })
            .string('--group <group>', {
              desc: 'Group for new property',
              group: 'Location'
            })
            .boolean('--nocopy', {
              desc: 'Do not copy cloned hostnames',
              group: 'Source'
            })
            .string('--forward <value>', { // could use enumeration if <hostname> was not dynamic ;)
              desc: 'Forward host header (origin|incoming|<hostname>)',
              group: "Hostnames"
            })
            .string('--ruleformat <format>', {
              desc: 'Use specified rule format'
            })
            .string('--notes <notes>', { // could use stringArray here to allow multiples, e.g. `--notes one --notes two`
              desc: 'Version notes for the property version'
            })
        },
        run: options => {
            let app = new WebSite({path:options.config, section: options.section, debug: debug});
            return createProperty(app, options.property, options)
            .then(() => {
                if (options.forward || options.variables || options.notes) {
                    return modifyProperty(app, options.property, options, command)
                } else {
                    return Promise.resolve();
                }
            })
        }
      })
      .command('modify <property>', {
          desc: 'Modify specified property',
          params: [{ hidden: true }],
          setup: sywac => {
            sywac
            .string('--propver <propver>', {
                desc: 'Property version - LATEST/STAGING/PRODUCTION/<number>'
            })
            .stringArray('--addhosts <addhosts>', {
                  desc: 'Comma delimited list of hostnames',
                  group: 'Hostnames'
            })
            .stringArray('--delhosts <delhosts>', {
                desc: 'Comma delimited list of hostnames',
                group: 'Hostnames'
            })
            .string('--edgehostname <edgehostname>', {
                desc: 'Edge hostname to use',
                group: 'Hostnames'
            })
            .string('--sureroutemap <sureroutemap>', {
                desc: 'Map for SureRoute',
                group: 'SureRoute'
            })
            .string('--surerouteto <surerouteto>', {
                desc: '"To" entry for SureRoute',
                group: 'SureRoute'
            })
            .string('--sureroutetohost <sureroutetohost>', {
                desc: 'Target host entry for SureRoute',
                group: 'SureRoute'
            })
            .string('--origin <origin>', {
                desc: 'Host for origin',
                group: "Hostnames"
            })
            .string('--forward <forward>', {
                desc: 'Forward host header (origin|incoming|<hostname>)',
                group: "Hostnames"
            })
            .number('--cpcode <cpcode>', {
                desc: 'Use specified cpcode for new property',
                group: 'Location'
              })
              .string('--ruleformat <ruleformat>', {
                desc: 'Switch property to specified rule format'
            })
            .string('--notes <notes>', {
                desc: 'Version notes for the property version'
            })
            .string('--move <move>', {
                desc: 'Group to move the property to (requires User Admin perms)'
            })
            .file('--variables <file>', { desc: '<REPLACE_ME>' })
        },
        run: options => {
            let app = new WebSite({path:options.config, section: options.section, debug: debug});
            return modifyProperty(app, options.property, options)
        }
    })

      .command('activate <property>', {
        desc: 'activate the property',
        params: [{ hidden: true }],
        setup: sywac => {
          sywac
            .enumeration('--network <network>', { // just a guess that this is the behavior you want, use `string()` otherwise
              desc: 'Network for activation',
              choices: NETWORK_CHOICES,
              required: true
            })
            .string('--propver <version>', {
              desc: 'Source version to activate'
            })
            .string('--email <address>', { // could use a `coerce` function to parse the email address
              desc: 'Email for confirmation'
            })
        },
        run: options => {
            let app = new WebSite({path:options.config, section: options.section, debug: debug});
            return activateProperty(app, options.property, options)
        }
      })
      .command('deactivate <property>', {
        desc: 'deactivate the property',
        params: [{ hidden: true }],
        setup: sywac => {
          sywac
            .enumeration('--network <network>', {
              desc: 'Network for deactivation',
              choices: NETWORK_CHOICES,
              required: true
            })
            .string('--email <address>', { // could use a `coerce` function to parse the email address
              desc: 'Email for confirmation'
            })
        },
        run: argv => {
            let app = new WebSite({path:options.config, section: options.section, debug: debug});
            return deactivateProperty(app, options.property, options)
        }
      })
      .command('delete <property>', {
        desc: 'delete a property',
        run: options => {
            options.network = "BOTH"
            let app = new WebSite({path:options.config, section: options.section, debug: debug});
            return deactivateProperty(app, options.property, options)
            .then(() => {
                return deleteProperty(app, options.property, options)
            })
        }
      })
      .command('update <property>', {
        desc: 'update target property',
        setup: sywac => {
          sywac
            .string('--srcprop <property>', {
              desc: 'Source property'
            })
            .string('--srcver <version>', {
              desc: 'Source version'
            })
            .file('--file <path>', {
              desc: 'File with JSON rules',
              mustExist: true // again, assuming this is what you want
            })
        },
        run: options => {
            let app = new WebSite({path:options.config, section: options.section, debug: debug});
            return updateProperty(app, options.property, options);
        }
      })
      .command('retrieve <property>', {
        desc: 'retrieve rules from target property',
        setup: sywac => {
          sywac
            .boolean('--format', { desc: 'Rules format only' })
            .boolean('--hostnames', { desc: 'Retrieve hostnames for property' })
            .boolean('--variables', { desc: 'Retrieve user variables' })
            .boolean('--propver', { desc: 'Retrieve specified version' })
        },
        run: options => {
            let app = new WebSite({path:options.config, section: options.section, debug: debug});
            if (options.hostnames) {
                return retrieveHostnames(app, options.property)
            } else if (options.variables) {
                return retrieveProperty(app, options.property, options)
            } else {
                return retrieveProperty(app, options.property, options)
            }
        }
      })
      .showHelpByDefault()
      .help('--help', { group: "Command"})
      .version('--version', { group: "Command"})
      .epilogue('Copyright (C) Akamai Technologies, Inc\nVisit http://github.com/akamai/cli-property for detailed documentation\n')
      .style({
        // you can style several other things too
        // and even style things differently when validation fails for them
        // see http://sywac.io/docs/sync-config.html#style
        group: str => chalk.blue.bold(str),
        hints: str => chalk.blue.bold(str)
      })
      .style({ // this applied to top-level sywac
        all: str => {
          return str.replace(
            '<REPLACE_ME>',
            'File with user variables. Format should be:\n' + JSON.stringify(variableFileExample, null, 2).split('\n').map(s => new Array(30).join(' ') + s).join('\n')
          )
        }
      })
      .outputSettings({ maxWidth: 100 })
      .parse()
      .then(result => {
        // let errors bubble up
        if (result.errors.length) {
            console.error("ERROR: ", result.errors[0] || JSON.stringify(result.errors[0]));
            console.output = "";
        }
        // if help requested, log it and exit
        if (result.output) {
          console.log(result.output)
          process.exit(result.code)
        }
    })
}
  console.time(app);
  var begin=Date.now();
  
  main().then(options => {
    var end=Date.now();
    var timeSpent=((end-begin)/1000/60).toPrecision(2) +" mins";
    console.log("Command time: " + timeSpent)
  })                                               